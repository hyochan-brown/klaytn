#!/bin/bash
#
# ksend         Startup script for the ksen
#
# chkconfig: - 85 15
# description : ksend is the Klaytn endpoint node daemon
#
# processname: ksend
# config:  /etc/ksend/conf/ksend.conf
# pidfile: /var/run/ksend.pid
#

# Source function library.
. /etc/init.d/functions

if [ -f /etc/ksend/conf/ksend.conf ]; then
        . /etc/ksend/conf/ksend.conf
fi

ksen=/usr/bin/ksen
prog=ksend
lockfile=${LOCKFILE-/var/lock/subsys/ksend}
pidfile=${PIDFILE-/var/run/ksend.pid}
RETVAL=0
STOP_TIMEOUT=${STOP_TIMEOUT-10}

set -f
OPTIONS=""

if [[ ! -z $METRICS ]] && [[ $METRICS -eq 1 ]]; then
    OPTIONS="$OPTIONS --metrics"
fi

if [[ ! -z $PROMETHEUS ]] && [[ $PROMETHEUS -eq 1 ]]; then
    OPTIONS="$OPTIONS --prometheus"
fi

if [[ ! -z $DB_NO_PARALLEL_WRITE ]] && [[ $DB_NO_PARALLEL_WRITE -eq 1 ]]; then
    OPTIONS="$OPTIONS --db.no-parallel-write"
fi

if [[ ! -z $MULTICHANNEL ]] && [[ $MULTICHANNEL -eq 1 ]]; then
    OPTIONS="$OPTIONS --multichannel"
fi

if [[ ! -z $RPC_ENABLE ]] && [[ $RPC_ENABLE -eq 1 ]]; then
    OPTIONS="$OPTIONS --rpc"
    if [ ! -z $RPC_API ]; then
        OPTIONS="$OPTIONS --rpcapi $RPC_API"
    fi
    if [ ! -z $RPC_PORT ]; then
        OPTIONS="$OPTIONS --rpcport $RPC_PORT"
    fi
    if [ ! -z $RPC_ADDR ]; then
        OPTIONS="$OPTIONS --rpcaddr $RPC_ADDR"
    fi
    if [ ! -z $RPC_CORSDOMAIN ]; then
        OPTIONS="$OPTIONS --rpccorsdomain $RPC_CORSDOMAIN"
    fi
    if [ ! -z $RPC_VHOSTS ]; then
        OPTIONS="$OPTIONS --rpcvhosts $RPC_VHOSTS"
    fi
fi

if [[ ! -z $WS_ENABLE ]] && [[ $WS_ENABLE -eq 1 ]]; then
    OPTIONS="$OPTIONS --ws"
    if [ ! -z $WS_API ]; then
        OPTIONS="$OPTIONS --wsapi $WS_API"
    fi
    if [ ! -z $WS_PORT ]; then
        OPTIONS="$OPTIONS --wsport $WS_PORT"
    fi
    if [ ! -z $WS_ADDR ]; then
        OPTIONS="$OPTIONS --wsaddr $WS_ADDR"
    fi
    if [ ! -z $WS_ORIGINS ]; then
        OPTIONS="$OPTIONS --wsorigins $WS_ORIGINS"
    fi
fi

# private network only for Service Chain
if [[ -z $NETWORK_ID ]]; then
    echo
    echo "[ERROR] network id should be specified for Service Chain."
    exit 1
else
    OPTIONS="$OPTIONS --networkid $NETWORK_ID"
    echo "[INFO] creating a private network: $NETWORK_ID"
    if [[ ! -z $NETWORK ]]; then
        echo
        echo "[WARN] ignoring the specified network for Service Chain: $NETWORK"
    fi
fi

if [ ! -z $DATA_DIR ]; then
    OPTIONS="$OPTIONS --datadir $DATA_DIR"
fi

if [ ! -z $PORT ]; then
    OPTIONS="$OPTIONS --port $PORT"
fi

if [ ! -z $SUBPORT ]; then
    OPTIONS="$OPTIONS --subport $SUBPORT"
fi

if [ ! -z $SERVER_TYPE ]; then
    OPTIONS="$OPTIONS --srvtype $SERVER_TYPE"
fi

if [ ! -z $VERBOSITY ]; then
    OPTIONS="$OPTIONS --verbosity $VERBOSITY"
fi

if [ ! -z $TXPOOL_EXEC_SLOTS_ALL ]; then # For v1.6.4 and after, use txpool.globalslots instead. it will be deprecated after v.1.12.0
    OPTIONS="$OPTIONS --txpool.exec-slots.all $TXPOOL_EXEC_SLOTS_ALL"
fi

if [ ! -z $TXPOOL_NONEXEC_SLOTS_ALL ]; then # For v1.6.4 and after, use txpool.globalqueue instead. it will be deprecated after v.1.12.0
    OPTIONS="$OPTIONS --txpool.nonexec-slots.all $TXPOOL_NONEXEC_SLOTS_ALL"
fi

if [ ! -z $TXPOOL_EXEC_SLOTS_ACCOUNT ]; then # For v1.6.4 and after, use txpool.accountslots instead. it will be deprecated after v.1.12.0
    OPTIONS="$OPTIONS --txpool.exec-slots.account $TXPOOL_EXEC_SLOTS_ACCOUNT"
fi

if [ ! -z $TXPOOL_NONEXEC_SLOTS_ACCOUNT ]; then # For v1.6.4 and after, use txpool.accountqueue instead. it will be deprecated after v.1.12.0
    OPTIONS="$OPTIONS --txpool.nonexec-slots.account $TXPOOL_NONEXEC_SLOTS_ACCOUNT"
fi

if [ ! -z $TXPOOL_GLOBAL_SLOTS ]; then
    OPTIONS="$OPTIONS --txpool.globalslots $TXPOOL_GLOBAL_SLOTS"
fi

if [ ! -z $TXPOOL_GLOBAL_QUEUE ]; then
    OPTIONS="$OPTIONS --txpool.globalqueue $TXPOOL_GLOBAL_QUEUE"
fi

if [ ! -z $TXPOOL_ACCOUNT_SLOTS ]; then
    OPTIONS="$OPTIONS --txpool.accountslots $TXPOOL_ACCOUNT_SLOTS"
fi

if [ ! -z $TXPOOL_ACCOUNT_QUEUE ]; then
    OPTIONS="$OPTIONS --txpool.accountqueue $TXPOOL_ACCOUNT_QUEUE"
fi

if [ ! -z TXPOOL_LIFE_TIME ]; then
    OPTIONS="$OPTIONS --txpool.lifetime $TXPOOL_LIFE_TIME"
fi

if [ ! -z $SYNCMODE ]; then
    OPTIONS="$OPTIONS --syncmode $SYNCMODE"
fi

if [ ! -z $MAXCONNECTIONS ]; then
    OPTIONS="$OPTIONS --maxconnections $MAXCONNECTIONS"
fi

if [ ! -z $LDBCACHESIZE ]; then
    OPTIONS="$OPTIONS --db.leveldb.cache-size $LDBCACHESIZE"
fi

if [[ ! -z $NO_DISCOVER ]] && [[ $NO_DISCOVER -eq 1 ]]; then
    OPTIONS="$OPTIONS --nodiscover"
fi

if [[ ! -z $BOOTNODES ]] && [[ $BOOTNODES != "" ]]; then
    OPTIONS="$OPTIONS --bootnodes $BOOTNODES"
fi

if [[ ! -z $SC_MAIN_BRIDGE ]] && [[ $SC_MAIN_BRIDGE -eq 1 ]]; then
    OPTIONS="$OPTIONS --mainbridge --mainbridgeport $SC_MAIN_BRIDGE_PORT"
    if [[ ! -z $SC_MAIN_BRIDGE_INDEXING ]] && [[ $SC_MAIN_BRIDGE_INDEXING -eq 1 ]]; then
        OPTIONS="$OPTIONS --childchainindexing"
    fi
fi

if [[ ! -z $SC_SUB_BRIDGE ]] && [[ $SC_SUB_BRIDGE -eq 1 ]]; then
    OPTIONS="$OPTIONS --subbridge --subbridgeport $SC_SUB_BRIDGE_PORT --chaintxperiod $SC_ANCHORING_PERIOD --chaintxlimit $SC_TX_LIMIT "
    OPTIONS="$OPTIONS --parentchainid $SC_PARENT_CHAIN_ID"
    if [[ ! -z $SC_ANCHORING ]] && [[ $SC_ANCHORING -eq 1 ]]; then
            OPTIONS="$OPTIONS --anchoring"
    fi

    if [[ ! -z $SC_KAS_ANCHOR ]] && [[ $SC_KAS_ANCHOR -eq 1 ]]; then
        OPTIONS="$OPTIONS --kas.sc.anchor"

        if [[ ! -z $SC_KAS_ANCHOR_PERIOD ]]; then
            OPTIONS="$OPTIONS --kas.sc.anchor.period $SC_KAS_ANCHOR_PERIOD"
        fi

        if [[ -z $SC_KAS_ANCHOR_URL ]]; then
            echo
            echo "[ERROR] kas.sc.anchor.url should be specified for KAS Anchor."
            exit 1
        fi
        OPTIONS="$OPTIONS --kas.sc.anchor.url $SC_KAS_ANCHOR_URL"

        if [[ -z $SC_KAS_ANCHOR_OPERATOR ]]; then
            echo
            echo "[ERROR] kas.sc.anchor.operator should be specified for KAS Anchor."
            exit 1
        fi
        OPTIONS="$OPTIONS --kas.sc.anchor.operator $SC_KAS_ANCHOR_OPERATOR"

        if [[ -z $SC_KAS_ANCHOR_ACCESS_KEY ]]; then
            echo
            echo "[ERROR] kas.accesskey should be specified for KAS Anchor."
            exit 1
        fi
        OPTIONS="$OPTIONS --kas.accesskey $SC_KAS_ANCHOR_ACCESS_KEY"

        if [[ -z $SC_KAS_ANCHOR_SECRET_KEY ]]; then
            echo
            echo "[ERROR] kas.secretkey should be specified for KAS Anchor."
            exit 1
        fi
        OPTIONS="$OPTIONS --kas.secretkey $SC_KAS_ANCHOR_SECRET_KEY"

        if [[ -z $SC_KAS_ANCHOR_X_CHAIN_ID ]]; then
            echo
            echo "[ERROR] kas.x-chain-id should be specified for KAS Anchor."
            exit 1
        fi
        OPTIONS="$OPTIONS --kas.x-chain-id $SC_KAS_ANCHOR_X_CHAIN_ID"
    fi
fi

if [[ ! -z $VTRECOVERY ]] && [[ $VTRECOVERY -eq 1 ]]; then
    OPTIONS="$OPTIONS --vtrecovery"
fi

if [[ ! -z $ADDITIONAL ]] && [[ $ADDITIONAL != "" ]]; then
    OPTIONS="$OPTIONS $ADDITIONAL"
fi

if [[ ! -z $AUTO_RESTART ]] && [[ $AUTO_RESTART -eq 1 ]]; then
    OPTIONS="$OPTIONS --autorestart.enable"
fi

BASEDIR="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
CURRENTFILE=`basename "$0"`
OPTIONS="$OPTIONS --autorestart.daemon.path $BASEDIR/$CURRENTFILE"
set +f

start() {
        echo -n "Starting $prog: "
        if [ ! -d ${LOG_DIR} ]; then
                mkdir -p ${LOG_DIR}
        fi

        __pids_var_run "$prog" "$pidfile"
        [ -n "$pid" ] && echo && return

        set -f
        $ksen $OPTIONS >> ${LOG_DIR}/ksend.out 2>&1 &
        RETVAL=$?
        PIDNUM=$!
        set +f
        if [ $RETVAL = 0 ]; then
                echo $PIDNUM > ${pidfile}
                touch ${lockfile}
                success "$prog startup"
        else
                failure "$prog startup"
        fi
        echo
        return $RETVAL
}

stop() {
        echo -n "Shutting down $prog: "
        killproc -p ${pidfile} -d ${STOP_TIMEOUT} $ksen
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status -p ${pidfile} -l ${lockfile} $ksen
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage: $prog {start|stop|restart|status}"
        exit 1
        ;;
esac
exit $?
