#!/usr/bin/env bash

BIN=$(cd "$(dirname $0)"; pwd)
CMD_HOME=$(dirname $BIN)
CONF=$CMD_HOME/conf
STOP_TIMEOUT=10 # seconds to wait for a clean exit

source $CONF/kspnd.conf

if [ -z $DATA_DIR ]; then
    echo
    echo "  [ERROR] : DATA_DIR in conf/kspnd.conf is not defined."
    exit 1
fi

if [ ! -d $DATA_DIR ]; then
    echo
    echo "  [ERROR] : Genesis block is not initiated: [conf/kspnd.conf - DATA_DIR=$DATA_DIR]"
    exit 1
fi

pidfile=$DATA_DIR/kspnd.pid

__pid_run() {
    unset pid
    if [ ! -f $pidfile ]; then
        return
    fi
    PID_NUM=$(eval "cat $pidfile")
    if [[ ! -z "$PID_NUM" ]]; then
        export pid=$(eval "ps -p $PID_NUM -o pid=")
    fi
}

__kill_timeout() {
    local PIDNUM=$1
    kill $PIDNUM
    for i in `seq 0 100 $((1000 * $STOP_TIMEOUT))`; do
        if ! kill -0 $PIDNUM 2> /dev/null; then
            echo "OK"
            return
        fi
        sleep 0.1
    done
    kill -9 $PIDNUM && echo "Killed"
}

start() {
    __pid_run
    [ -n "$pid" ] && echo "kspnd already running...[$pid]" && return

    echo -n "Starting kspnd: "

    if [ ! -d $LOG_DIR ]; then
        mkdir -p $LOG_DIR
    fi

    set -f
    OPTIONS=""

    if [[ ! -z $METRICS ]] && [[ $METRICS -eq 1 ]]; then
        OPTIONS="$OPTIONS --metrics"
    fi

    if [[ ! -z $PROMETHEUS ]] && [[ $PROMETHEUS -eq 1 ]]; then
        OPTIONS="$OPTIONS --prometheus"
    fi

    if [[ ! -z $DB_NO_PARALLEL_WRITE ]] && [[ $DB_NO_PARALLEL_WRITE -eq 1 ]]; then
        OPTIONS="$OPTIONS --db.no-parallel-write"
    fi

    if [[ ! -z $MULTICHANNEL ]] && [[ $MULTICHANNEL -eq 1 ]]; then
        OPTIONS="$OPTIONS --multichannel"
    fi

    if [[ ! -z $HTTP_ENABLE ]] && [[ $HTTP_ENABLE -eq 1 ]]; then
        OPTIONS="$OPTIONS --http"
        if [ ! -z $HTTP_API ]; then
            OPTIONS="$OPTIONS --http.api $HTTP_API"
        fi
        if [ ! -z $HTTP_PORT ]; then
            OPTIONS="$OPTIONS --http.port $HTTP_PORT"
        fi
        if [ ! -z $HTTP_ADDR ]; then
            OPTIONS="$OPTIONS --http.addr $HTTP_ADDR"
        fi
        if [ ! -z $HTTP_CORSDOMAIN ]; then
            OPTIONS="$OPTIONS --http.corsdomain $HTTP_CORSDOMAIN"
        fi
        if [ ! -z $HTTP_VHOSTS ]; then
            OPTIONS="$OPTIONS --http.vhosts $HTTP_VHOSTS"
        fi
    fi

    #Deprecated options
    if [[ ! -z $RPC_ENABLE ]] && [[ $RPC_ENABLE -eq 1 ]]; then
        OPTIONS="$OPTIONS --rpc"
        if [ ! -z $RPC_API ]; then
            OPTIONS="$OPTIONS --rpc.api $RPC_API"
        fi
        if [ ! -z $RPC_PORT ]; then
            OPTIONS="$OPTIONS --rpc.port $RPC_PORT"
        fi
        if [ ! -z $RPC_ADDR ]; then
            OPTIONS="$OPTIONS --rpc.addr $RPC_ADDR"
        fi
        if [ ! -z $RPC_CORSDOMAIN ]; then
            OPTIONS="$OPTIONS --rpc.corsdomain $RPC_CORSDOMAIN"
        fi
        if [ ! -z $RPC_VHOSTS ]; then
            OPTIONS="$OPTIONS --rpc.vhosts $RPC_VHOSTS"
        fi
    fi


    if [[ ! -z $WS_ENABLE ]] && [[ $WS_ENABLE -eq 1 ]]; then
        OPTIONS="$OPTIONS --ws"
        if [ ! -z $WS_API ]; then
            OPTIONS="$OPTIONS --ws.api $WS_API"
        fi
        if [ ! -z $WS_PORT ]; then
            OPTIONS="$OPTIONS --ws.port $WS_PORT"
        fi
        if [ ! -z $WS_ADDR ]; then
            OPTIONS="$OPTIONS --ws.addr $WS_ADDR"
        fi
        if [ ! -z $WS_ORIGINS ]; then
            OPTIONS="$OPTIONS --ws.origins $WS_ORIGINS"
        fi
    fi

    # private network only for Service Chain
    if [[ -z $NETWORK_ID ]]; then
        echo
        echo "[ERROR] network id should be specified for Service Chain."
        exit 1
    else
        OPTIONS="$OPTIONS --networkid $NETWORK_ID"
        echo "[INFO] creating a private network: $NETWORK_ID"
        if [[ ! -z $NETWORK ]]; then
            echo
            echo "[WARN] ignoring the specified network for Service Chain: $NETWORK"
        fi
    fi

    if [ ! -z $DATA_DIR ]; then
        OPTIONS="$OPTIONS --datadir $DATA_DIR"
    fi

    if [ ! -z $PORT ]; then
        OPTIONS="$OPTIONS --port $PORT"
    fi

    if [ ! -z $SUBPORT ]; then
        OPTIONS="$OPTIONS --subport $SUBPORT"
    fi

    if [ ! -z $SERVER_TYPE ]; then
        OPTIONS="$OPTIONS --srvtype $SERVER_TYPE"
    fi

    if [ ! -z $VERBOSITY ]; then
        OPTIONS="$OPTIONS --verbosity $VERBOSITY"
    fi

    if [ ! -z $TXPOOL_EXEC_SLOTS_ALL ]; then
        OPTIONS="$OPTIONS --txpool.exec-slots.all $TXPOOL_EXEC_SLOTS_ALL"
    fi

    if [ ! -z $TXPOOL_NONEXEC_SLOTS_ALL ]; then
        OPTIONS="$OPTIONS --txpool.nonexec-slots.all $TXPOOL_NONEXEC_SLOTS_ALL"
    fi

    if [ ! -z $TXPOOL_EXEC_SLOTS_ACCOUNT ]; then
        OPTIONS="$OPTIONS --txpool.exec-slots.account $TXPOOL_EXEC_SLOTS_ACCOUNT"
    fi

    if [ ! -z $TXPOOL_NONEXEC_SLOTS_ACCOUNT ]; then
        OPTIONS="$OPTIONS --txpool.nonexec-slots.account $TXPOOL_NONEXEC_SLOTS_ACCOUNT"
    fi

    if [ ! -z $SYNCMODE ]; then
        OPTIONS="$OPTIONS --syncmode $SYNCMODE"
    fi

    if [ ! -z $MAXCONNECTIONS ]; then
        OPTIONS="$OPTIONS --maxconnections $MAXCONNECTIONS"
    fi

    if [ ! -z $LDBCACHESIZE ]; then
        OPTIONS="$OPTIONS --db.leveldb.cache-size $LDBCACHESIZE"
    fi

    if [[ ! -z $NO_DISCOVER ]] && [[ $NO_DISCOVER -eq 1 ]]; then
        OPTIONS="$OPTIONS --nodiscover"
    fi

    if [[ ! -z $BOOTNODES ]] && [[ $BOOTNODES != "" ]]; then
        OPTIONS="$OPTIONS --bootnodes $BOOTNODES"
    fi

    if [[ ! -z $SC_MAIN_BRIDGE ]] && [[ $SC_MAIN_BRIDGE -eq 1 ]]; then
        OPTIONS="$OPTIONS --mainbridge --mainbridgeport $SC_MAIN_BRIDGE_PORT"
        if [[ ! -z $SC_MAIN_BRIDGE_INDEXING ]] && [[ $SC_MAIN_BRIDGE_INDEXING -eq 1 ]]; then
            OPTIONS="$OPTIONS --childchainindexing"
        fi
    fi

    if [[ ! -z $SC_SUB_BRIDGE ]] && [[ $SC_SUB_BRIDGE -eq 1 ]]; then
        OPTIONS="$OPTIONS --subbridge --subbridgeport $SC_SUB_BRIDGE_PORT --chaintxperiod $SC_ANCHORING_PERIOD --chaintxlimit $SC_TX_LIMIT "
        OPTIONS="$OPTIONS --parentchainid $SC_PARENT_CHAIN_ID"
        if [[ ! -z $SC_ANCHORING ]] && [[ $SC_ANCHORING -eq 1 ]]; then
            OPTIONS="$OPTIONS --anchoring"
        fi

        if [[ ! -z $SC_KAS_ANCHOR ]] && [[ $SC_KAS_ANCHOR -eq 1 ]]; then
            OPTIONS="$OPTIONS --kas.sc.anchor"

            if [[ ! -z $SC_KAS_ANCHOR_PERIOD ]]; then
                OPTIONS="$OPTIONS --kas.sc.anchor.period $SC_KAS_ANCHOR_PERIOD"
            fi

            if [[ -z $SC_KAS_ANCHOR_URL ]]; then
                echo
                echo "[ERROR] kas.sc.anchor.url should be specified for KAS Anchor."
                exit 1
            fi
            OPTIONS="$OPTIONS --kas.sc.anchor.url $SC_KAS_ANCHOR_URL"

            if [[ -z $SC_KAS_ANCHOR_OPERATOR ]]; then
                echo
                echo "[ERROR] kas.sc.anchor.operator should be specified for KAS Anchor."
                exit 1
            fi
            OPTIONS="$OPTIONS --kas.sc.anchor.operator $SC_KAS_ANCHOR_OPERATOR"

            if [[ -z $SC_KAS_ANCHOR_ACCESS_KEY ]]; then
                echo
                echo "[ERROR] kas.accesskey should be specified for KAS Anchor."
                exit 1
            fi
            OPTIONS="$OPTIONS --kas.accesskey $SC_KAS_ANCHOR_ACCESS_KEY"

            if [[ -z $SC_KAS_ANCHOR_SECRET_KEY ]]; then
                echo
                echo "[ERROR] kas.secretkey should be specified for KAS Anchor."
                exit 1
            fi
            OPTIONS="$OPTIONS --kas.secretkey $SC_KAS_ANCHOR_SECRET_KEY"

            if [[ -z $SC_KAS_ANCHOR_X_CHAIN_ID ]]; then
                echo
                echo "[ERROR] kas.x-chain-id should be specified for KAS Anchor."
                exit 1
            fi
            OPTIONS="$OPTIONS --kas.x-chain-id $SC_KAS_ANCHOR_X_CHAIN_ID"
        fi
    fi

    if [[ ! -z $VTRECOVERY ]] && [[ $VTRECOVERY -eq 1 ]]; then
        OPTIONS="$OPTIONS --vtrecovery"
    fi

    if [[ ! -z $ADDITIONAL ]] && [[ $ADDITIONAL != "" ]]; then
        OPTIONS="$OPTIONS $ADDITIONAL"
    fi

    BASEDIR="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
    CURRENTFILE=`basename "$0"`
    OPTIONS="$OPTIONS --autorestart.daemon.path $BASEDIR/$CURRENTFILE"

    $BIN/kspn $OPTIONS >> ${LOG_DIR}/kspnd.out 2>&1 &
    RETVAL=$?
    PIDNUM=$!
    set +f
    if [ $RETVAL = 0 ]; then
        echo $PIDNUM > ${pidfile}
        echo "OK"
    else
        echo "Fail"
    fi
    return $RETVAL
}

stop() {
    __pid_run
    [ -z "$pid" ] && echo "kspnd is not running" && return
    echo -n "Shutting down kspnd: "
    __kill_timeout $(eval "cat ${pidfile}") && rm -f ${pidfile}
}

status() {
    __pid_run
    if [ -n "$pid" ]; then
        echo "kspnd is running"
    else
        echo "kspnd is down"
    fi
}

restart() {
    stop
    sleep 3
    start
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        restart
        ;;
    *)
        echo "Usages: kspnd {start|stop|restart|status}"
        exit 1
        ;;
esac
exit 0
